@page "/Gestao/Pedidos/Detalhes/{id:int}"
@using Big.Models
@using Big.Services
@inject PedidoService PedidoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Detalhes do Pedido #@pedido?.Id</h3>

@if (pedido == null)
{
<p>Carregando pedido...</p>
}
else
{
<div class="card">
    <div class="card-header">
        <strong>Informações Gerais</strong>
    </div>
    <div class="card-body">
        <p><strong>Cliente:</strong> @pedido.Cliente.Nome</p>
        <p><strong>Vendedor:</strong> @vendedorMock</p>
        <p><strong>Data do Pedido:</strong> @pedido.DataPedido.ToShortDateString()</p>
        <p><strong>Status:</strong>
            <span class="badge @(pedido.Status == "Aprovado" ? "bg-success" : pedido.Status == "Rejeitado" ? "bg-danger" : "bg-warning")">
                    @pedido.Status
                </span>
        </p>
        <p><strong>Total:</strong> @pedido.Total.ToString("C")</p>
    </div>
</div>

<div class="card mt-3">
    <div class="card-header">
    <strong>Produtos no Pedido</strong>
    </div>
    <div class="card-body">
    <table class="table table-striped">
    <thead>
            <tr>
    <th>Produto</th>
        <th>Quantidade</th>
    <th>Preço Unitário</th>
        <th>Subtotal</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in pedido.Produtos)
        {
    <tr>
    <td>@item.Produto.Nome</td>
    <td>@item.Quantidade</td>
        <td>@item.PrecoUnitario.ToString("C")</td>
        <td>@(item.Quantidade * item.PrecoUnitario).ToString("C")</td>
    </tr>
    }
    </tbody>
    </table>
    </div>
</div>

<a href="/GestaoPedidos" class="btn btn-secondary mt-3">Voltar</a>
}

@code {
[Parameter] public int id { get; set; }
private Pedido? pedido;
private string vendedorMock;

protected override async Task OnInitializedAsync()
{
pedido = await PedidoService.ObterPorIdAsync(id);

if (pedido != null)
{
// Simula vendedores aleatórios
var vendedoresMock = new List<string> { "João Silva", "Maria Oliveira", "Carlos Souza", "Ana Pereira" };
var random = new Random();
vendedorMock = vendedoresMock[random.Next(vendedoresMock.Count)];
}
}
}
