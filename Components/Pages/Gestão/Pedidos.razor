@page "/GestaoPedidos"
@using Big.Models
@using Big.Services
@inject PedidoService PedidoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Gest√£o de Pedidos</h3>

<div class="mb-4 p-3 border rounded">
    <h5>Filtros</h5>
    <EditForm Model="@filtros" OnValidSubmit="AplicarFiltrosAsync">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Cliente:</label>
                <InputText class="form-control" @bind-Value="filtros.Cliente" placeholder="Digite o nome do cliente..." />
            </div>
            <div class="col-md-3">
                <label class="form-label">Status:</label>
                <InputSelect class="form-control" @bind-Value="filtros.Status">
                    <option value="">Todos</option>
                    <option value="Aguardando">Aguardando</option>
                    <option value="Aprovado">Aprovado</option>
                    <option value="Rejeitado">Rejeitado</option>
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label">Data do Pedido:</label>
                <InputDate class="form-control" @bind-Value="filtros.DataPedido" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Valor m√≠nimo:</label>
                <InputNumber class="form-control" @bind-Value="filtros.ValorMinimo" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <button type="submit" class="btn btn-primary w-100">Aplicar Filtros</button>
            </div>
            <div class="col-md-6">
                <button type="button" class="btn btn-secondary w-100" @onclick="RemoverFiltros">Limpar Filtros</button>
            </div>
        </div>
    </EditForm>
</div>

@if (pedidos == null)
{
    <p><em>Carregando pedidos...</em></p>
}
else if (!pedidos.Any())
{
    <p>Nenhum pedido encontrado.</p>
}
else
{
    @foreach (var grupo in pedidosAgrupados)
    {
        <h5 class="mt-4">Pedidos de @grupo.Key.ToShortDateString()</h5>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>Vendedor</th>
                    <th>Status</th>
                    <th>Total</th>
                    <th>A√ß√µes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pedido in grupo)
                {
                    <tr>
                        <td>@pedido.Id</td>
                        <td>@pedido.Cliente.Nome</td>
                        <td>@ObterVendedorAleatorio(pedido.Id)</td> 
                        <td>
                            <span class="badge @(pedido.Status == "Aprovado" ? "bg-success" : pedido.Status == "Rejeitado" ? "bg-danger" : "bg-warning")">
                                @pedido.Status
                            </span>
                        </td>
                        <td>@pedido.Total.ToString("C")</td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="@(() => AlterarStatus(pedido, "Aprovado"))">
                                ‚úî Aprovar
                            </button>

                            <button class="btn btn-danger btn-sm" @onclick="@(() => AlterarStatus(pedido, "Rejeitado"))">
                                ‚ùå Rejeitar
                            </button>

                            <a href="/Pedidos/Editar/@pedido.Id" class="btn btn-primary btn-sm">Editar</a>

                            <a href="/Gestao/Pedidos/Detalhes/@pedido.Id" class="btn btn-info btn-sm">üëÅ Ver Detalhes</a>

                            <button class="btn btn-secondary btn-sm" @onclick="@(() => GerarNota(pedido))">
                                üìÑ Nota
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<Pedido>? pedidos;
    private List<IGrouping<DateTime, Pedido>> pedidosAgrupados;
    private FiltrosPedido filtros = new();
    
    private List<string> vendedoresMock = new() { "Jo√£o Silva", "Maria Oliveira", "Carlos Souza", "Ana Lima", "Pedro Ferreira" };
    private Dictionary<int, string> vendedoresAssociados = new(); 

    protected override async Task OnInitializedAsync()
    {
        await CarregarPedidos();
    }

    private async Task CarregarPedidos()
    {
        pedidos = await PedidoService.ObterTodosAsync() ?? new List<Pedido>();
        
        var random = new Random();
        foreach (var pedido in pedidos)
        {
            if (!vendedoresAssociados.ContainsKey(pedido.Id))
            {
                vendedoresAssociados[pedido.Id] = vendedoresMock[random.Next(vendedoresMock.Count)];
            }
        }

        AplicarFiltros();
    }

    private string ObterVendedorAleatorio(int pedidoId)
    {
        return vendedoresAssociados.ContainsKey(pedidoId) ? vendedoresAssociados[pedidoId] : "N√£o definido";
    }

    private void AplicarFiltros()
    {
        var resultado = pedidos.Where(p =>
            (string.IsNullOrEmpty(filtros.Cliente) || p.Cliente.Nome.Contains(filtros.Cliente, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filtros.Status) || p.Status == filtros.Status) &&
            (!filtros.DataPedido.HasValue || p.DataPedido.Date == filtros.DataPedido.Value.Date) &&
            (!filtros.ValorMinimo.HasValue || p.Total >= filtros.ValorMinimo)
        ).OrderByDescending(p => p.DataPedido).ToList();

        pedidosAgrupados = resultado.GroupBy(p => p.DataPedido.Date).ToList();
    }

    private async Task AplicarFiltrosAsync()
    {
        AplicarFiltros();
    }

    private async Task RemoverFiltros()
    {
        filtros = new FiltrosPedido();
        AplicarFiltros();
    }

    private async Task AlterarStatus(Pedido pedido, string novoStatus)
    {
        await PedidoService.AtualizarStatusAsync(pedido.Id, novoStatus);
        pedido.Status = novoStatus;
        StateHasChanged();
    }

    private async Task GerarNota(Pedido pedido)
    {
        Console.WriteLine($"Gerando nota para pedido #{pedido.Id}...");
        //Feature futura 
    }

    private class FiltrosPedido
    {
        public string? Cliente { get; set; }
        public string? Status { get; set; }
        public DateTime? DataPedido { get; set; }
        public decimal? ValorMinimo { get; set; }
    }
    
}