@page "/Vendedores"
@using Big.Models
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3><i class="bi bi-people"></i> Funcionários</h3>

<div class="mb-4 p-3 border rounded">
    <h5>Filtros</h5>
    <EditForm Model="@filtros" OnValidSubmit="AplicarFiltros">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Nome</label>
                <InputText class="form-control" @bind-Value="filtros.Nome" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Email</label>
                <InputText class="form-control" @bind-Value="filtros.Email" />
            </div>
            <div class="col-md-3">
                <label class="form-label">CPF</label>
                <InputText class="form-control" @bind-Value="filtros.CPF" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Cargo</label>
                <InputSelect class="form-control" @bind-Value="filtros.Cargo">
                    <option value="">Todos</option>
                    <option value="Gerente">Gerente</option>
                    <option value="Vendedor">Vendedor</option>
                    <option value="Atendente">Atendente</option>
                    <option value="Financeiro">Financeiro</option>
                    <option value="TI">TI</option>
                </InputSelect>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <button type="submit" class="btn btn-primary w-100">Aplicar Filtros</button>
            </div>
            <div class="col-md-6">
                <button type="button" class="btn btn-secondary w-100" @onclick="RemoverFiltros">Limpar Filtros</button>
            </div>
        </div>
    </EditForm>
</div>

<div class="mb-3">
    <label class="form-label">Ordenar por:</label>
    <InputSelect class="form-control" @bind-Value="criterioOrdenacao" @onchange="OrdenarUsuarios">
        <option value="nome">Nome</option>
        <option value="cadastro">Data de Cadastro</option>
        <option value="login">Último Login</option>
    </InputSelect>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th></th>
            <th>Nome</th>
            <th>Email</th>
            <th>CPF</th>
            <th>Cargo</th>
            <th>Status</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var usuario in usuariosFiltrados)
        {
            <tr>
                <td class="text-center">
                    <i class="bi bi-person-circle fs-3"></i>
                </td>
                <td>@usuario.NomeCompleto @(usuario.IsAdmin ? "<span class='badge bg-warning'>Admin</span>" : "")</td>
                <td>@usuario.Email</td>
                <td>@usuario.CPF</td>
                <td>@usuario.RoleAdicional</td>
                <td>
                    <span class="badge @(usuario.UltimoLogin > DateTime.Now.AddMinutes(-10) ? "bg-success" : "bg-secondary")">
                        @(usuario.UltimoLogin > DateTime.Now.AddMinutes(-10) ? "Online" : "Offline")
                    </span>
                </td>
                <td>
                    <a href="/Vendedores/Editar/@usuario.Id" class="btn btn-primary btn-sm">Editar</a>
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoverUsuario(usuario.Id)">Remover</button>
                    <button class="btn btn-secondary btn-sm" @onclick="() => BloquearUsuario(usuario.Id)">Bloquear</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ApplicationUser> usuarios = new();
    private List<ApplicationUser> usuariosFiltrados = new();
    private string criterioOrdenacao = "nome";
    private FiltrosUsuario filtros = new();

    protected override async Task OnInitializedAsync()
    {
        CarregarUsuariosMock();
        AplicarFiltros();
    }

    private void CarregarUsuariosMock()
    {
        usuarios = new List<ApplicationUser>
        {
            new ApplicationUser { Id = "1", NomeCompleto = "Lucas Ferreira", Email = "lucas@email.com", CPF = "123.456.789-00", RoleAdicional = "Gerente",UltimoLogin = DateTime.Now },
            new ApplicationUser { Id = "2", NomeCompleto = "Ana Souza", Email = "ana@email.com", CPF = "987.654.321-00", RoleAdicional = "Vendedor", UltimoLogin = DateTime.Now.AddHours(-1) },
            new ApplicationUser { Id = "3", NomeCompleto = "Pedro Lima", Email = "pedro@email.com", CPF = "654.321.987-00", RoleAdicional = "Atendente", UltimoLogin = DateTime.Now.AddDays(-1) },
            new ApplicationUser { Id = "4", NomeCompleto = "Mariana Costa", Email = "mariana@email.com", CPF = "321.987.654-00", RoleAdicional = "Financeiro", UltimoLogin = DateTime.Now.AddMinutes(-5) },
            new ApplicationUser { Id = "5", NomeCompleto = "Carlos Mendes", Email = "carlos@email.com", CPF = "111.222.333-44", RoleAdicional = "TI", UltimoLogin = DateTime.Now.AddMonths(-1) }
        };
    }

    private void AplicarFiltros()
    {
        usuariosFiltrados = usuarios
            .Where(u => string.IsNullOrEmpty(filtros.Nome) || u.NomeCompleto.Contains(filtros.Nome, StringComparison.OrdinalIgnoreCase))
            .Where(u => string.IsNullOrEmpty(filtros.Email) || u.Email.Contains(filtros.Email, StringComparison.OrdinalIgnoreCase))
            .Where(u => string.IsNullOrEmpty(filtros.CPF) || u.CPF == filtros.CPF)
            .Where(u => string.IsNullOrEmpty(filtros.Cargo) || u.RoleAdicional == filtros.Cargo)
            .ToList();

        OrdenarUsuarios();
    }

    private async Task OrdenarUsuarios()
    {
        switch (criterioOrdenacao)
        {
            case "nome":
                usuariosFiltrados = usuariosFiltrados.OrderBy(u => u.NomeCompleto).ToList();
                break;
            case "cadastro":
                usuariosFiltrados = usuariosFiltrados.OrderBy(u => u.Id).ToList();
                break;
            case "login":
                usuariosFiltrados = usuariosFiltrados.OrderByDescending(u => u.UltimoLogin).ToList();
                break;
        }
    }

    private async Task RemoverFiltros()
    {
        filtros = new FiltrosUsuario();
        AplicarFiltros();
    }

    private void RemoverUsuario(string id)
    {
        usuarios.RemoveAll(u => u.Id == id);
        AplicarFiltros();
    }

    private void BloquearUsuario(string id)
    {
        Console.WriteLine($"Usuário {id} bloqueado.");
    }

    private class FiltrosUsuario
    {
        public string? Nome { get; set; }
        public string? Email { get; set; }
        public string? CPF { get; set; }
        public string? Cargo { get; set; }
    }
}
