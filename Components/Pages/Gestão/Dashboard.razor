@page "/Dashboard"
@using System.Globalization
@using MudBlazor
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3><i class="bi bi-speedometer2"></i> Dashboard de Vendas</h3>

<MudPaper Class="pa-4 mb-4" Style="background-color: #f8f9fa; border-radius: 8px;">
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Selecione o M√™s</label>
            <InputSelect class="form-control" @bind-Value="mesSelecionado" @onchange="AtualizarDados">
                @for (int i = 1; i <= 12; i++)
                {
                    <option value="@i">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label class="form-label">Selecione o Ano</label>
            <InputSelect class="form-control" @bind-Value="anoSelecionado" @onchange="AtualizarDados">
                @for (int i = 2022; i <= DateTime.Now.Year; i++)
                {
                    <option value="@i">@i</option>
                }
            </InputSelect>
        </div>
    </div>
</MudPaper>

<div class="row">
    <div class="col-md-3">
        <MudPaper Class="pa-3 bg-primary text-white">
            <h5>Pedidos no m√™s</h5>
            <p class="fs-4">@mockPedidos.Count</p>
        </MudPaper>
    </div>
    <div class="col-md-3">
        <MudPaper Class="pa-3 bg-success text-white">
            <h5>Total Faturado</h5>
            <p class="fs-4">@mockPedidos.Sum(p => p.Total).ToString("C")</p>
        </MudPaper>
    </div>
    <div class="col-md-3">
        <MudPaper Class="pa-3 bg-warning text-white">
            <h5>Pedidos Aprovados</h5>
            <p class="fs-4">@mockPedidos.Count(p => p.Status == "Aprovado")</p>
        </MudPaper>
    </div>
    <div class="col-md-3">
        <MudPaper Class="pa-3 bg-danger text-white">
            <h5>Pedidos Rejeitados</h5>
            <p class="fs-4">@mockPedidos.Count(p => p.Status == "Rejeitado")</p>
        </MudPaper>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <h5>üìà Evolu√ß√£o de Vendas</h5>
        <MudChart ChartType="ChartType.Line" ChartSeries="@seriesVendas" XAxisLabels="@labelsMeses" Width="100%" Height="350px"></MudChart>
    </div>
    <div class="col-md-6">
        <h5>üìä Pedidos por Status</h5>
        <MudPaper Class="pa-4">
            <MudChart ChartType="ChartType.Pie" InputData="@dadosStatus" InputLabels="@labelsStatus" Width="100%" Height="300px" />
        </MudPaper>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <h5>üì¶ Produtos Mais Vendidos</h5>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@seriesProdutos" XAxisLabels="@labelsProdutos" Width="100%" Height="350px"></MudChart>
    </div>
    <div class="col-md-6">
        <h5>üë®‚Äçüíº Vendas por Vendedor</h5>
        <MudChart ChartType="ChartType.StackedBar" ChartSeries="@seriesVendedores" XAxisLabels="@labelsMeses" Width="100%" Height="350px"></MudChart>
    </div>
</div>

<div MudPaper Class="pa-3 bg-info text-white">
    <h5>Ticket M√©dio</h5>
    <p class="fs-4">@MediaTicket.ToString("C")</p>
</div>

<h4 class="mt-4">üìã √öltimos Pedidos</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Cliente</th>
            <th>Status</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pedido in mockPedidos.OrderByDescending(p => p.DataPedido).Take(5))
        {
            <tr>
                <td>@pedido.Id</td>
                <td>@pedido.ClienteNome</td>
                <td>
                    <span class="badge @(pedido.Status == "Aprovado" ? "bg-success" : pedido.Status == "Rejeitado" ? "bg-danger" : "bg-warning")">
                        @pedido.Status
                    </span>
                </td>
                <td>@pedido.Total.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private int mesSelecionado = DateTime.Now.Month;
    private int anoSelecionado = DateTime.Now.Year;
    private List<PedidoMock> mockPedidos = new();
    private List<ChartSeries> seriesVendas = new();
    private List<ChartSeries> seriesProdutos = new();
    private List<ChartSeries> seriesVendedores = new();
    private string[] labelsMeses = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    private string[] labelsProdutos = { "Produto A", "Produto B", "Produto C", "Produto D", "Produto E" };
    
    private double[] dadosStatus;
    private string[] labelsStatus = { "Aprovado", "Rejeitado", "Aguardando" };

    protected override async Task OnInitializedAsync()
    {
        GerarDadosMock();
    }

    private void GerarDadosMock()
    {
        var random = new Random();

        mockPedidos = new List<PedidoMock>
        {
            new PedidoMock { Id = 1001, ClienteNome = "Lucas Ferreira", DataPedido = new DateTime(anoSelecionado, mesSelecionado, 1), Status = "Aprovado", Total = random.Next(100, 800) },
            new PedidoMock { Id = 1002, ClienteNome = "Ana Souza", DataPedido = new DateTime(anoSelecionado, mesSelecionado, 3), Status = "Rejeitado", Total = random.Next(100, 800) },
            new PedidoMock { Id = 1003, ClienteNome = "Pedro Lima", DataPedido = new DateTime(anoSelecionado, mesSelecionado, 5), Status = "Aprovado", Total = random.Next(100, 800) },
            new PedidoMock { Id = 1004, ClienteNome = "Mariana Costa", DataPedido = new DateTime(anoSelecionado, mesSelecionado, 7), Status = "Aguardando", Total = random.Next(100, 800) },
            new PedidoMock { Id = 1005, ClienteNome = "Carlos Mendes", DataPedido = new DateTime(anoSelecionado, mesSelecionado, 10), Status = "Aprovado", Total = random.Next(100, 800) },
        };

        seriesVendas = new List<ChartSeries>
        {
            new ChartSeries { Name = "Vendas", Data = Enumerable.Range(0, 12).Select(_ => (double)random.Next(5, 20)).ToArray() }
        };

        seriesProdutos = new List<ChartSeries>
        {
            new ChartSeries { Name = "Quantidade Vendida", Data = new double[] { 25, 40, 35, 20, 50 } }
        };

        seriesVendedores = new List<ChartSeries>
        {
            new ChartSeries { Name = "Vendedor A", Data = new double[] { 10, 20, 15, 25, 30, 35, 20, 15, 10 } },
            new ChartSeries { Name = "Vendedor B", Data = new double[] { 5, 10, 12, 18, 22, 28, 32, 38, 40 } }
        };

        dadosStatus = new double[]
        {
            mockPedidos.Count(p => p.Status == "Aprovado"),
            mockPedidos.Count(p => p.Status == "Rejeitado"),
            mockPedidos.Count(p => p.Status == "Aguardando")
        };
    }
    
    private decimal MediaTicket => mockPedidos.Count > 0 ? mockPedidos.Sum(p => p.Total) / mockPedidos.Count : 0;
    private async Task AtualizarDados(ChangeEventArgs e)
    {
        GerarDadosMock();
    }
    private class PedidoMock
    {
        public int Id { get; set; }
        public string ClienteNome { get; set; }
        public DateTime DataPedido { get; set; }
        public string Status { get; set; }
        public decimal Total { get; set; }
    }
}
