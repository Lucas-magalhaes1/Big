@page "/Produtos/Editar/{id:int}"
@using Big.Models
@using Big.Services
@inject ProdutoService ProdutoService
@inject CategoriaService CategoriaService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Editar Produto</h3>

@if (produto == null)
{
    <p>Carregando informações do produto...</p>
}
else
{
    @if (mostrarFeedback)
    {
        <div class="alert alert-success" role="alert">
            Produto atualizado com sucesso!
        </div>
    }

    <EditForm Model="@produto" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nome:</label>
            <InputText @bind-Value="produto.Nome" class="form-control" />
            <ValidationMessage For="@(() => produto.Nome)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descrição:</label>
            <InputTextArea @bind-Value="produto.Descricao" class="form-control" />
            <ValidationMessage For="@(() => produto.Descricao)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Preço:</label>
            <InputNumber @bind-Value="produto.Preco" class="form-control" />
            <ValidationMessage For="@(() => produto.Preco)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Estoque Loja:</label>
            <InputNumber @bind-Value="produto.EstoqueLoja" class="form-control" />
            <ValidationMessage For="@(() => produto.EstoqueLoja)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Estoque Centro de Distribuição:</label>
            <InputNumber @bind-Value="produto.EstoqueCentroDistribuicao" class="form-control" />
            <ValidationMessage For="@(() => produto.EstoqueCentroDistribuicao)" />
        </div>

        <div class="mb-3">
            <label class="form-label">URL da Imagem:</label>
            <InputText @bind-Value="produto.ImagemUrl" class="form-control" />
            <ValidationMessage For="@(() => produto.ImagemUrl)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Categoria:</label>
            <InputSelect @bind-Value="produto.CategoriaId" class="form-control">
                <option value="" disabled>Selecione uma categoria</option>
                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.Id">@categoria.Nome</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => produto.CategoriaId)" />
        </div>

        <button type="submit" class="btn btn-success">Salvar</button>
        <a href="/Produtos" class="btn btn-secondary">Cancelar</a>
        <a href="/Produtos/Excluir/@produto.Id" class="btn btn-danger">Excluir</a>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Produto produto = new Produto();
    private List<Categoria> categorias = new();
    private bool mostrarFeedback = false;

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaService.ObterTodasAsync();
        produto = await ProdutoService.ObterPorIdAsync(Id);

        if (produto == null)
        {
            Navigation.NavigateTo("/Produtos");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            if (produto.CategoriaId == null || produto.CategoriaId == 0)
            {
                Console.WriteLine("A categoria do produto é obrigatória.");
                return;
            }

            await ProdutoService.AtualizarAsync(produto);
            mostrarFeedback = true;

            await Task.Delay(2000);
            Navigation.NavigateTo("/Produtos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao atualizar o produto: {ex.Message}");
        }
    }
}
